Index: src/main/resources/META-INF/plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><idea-plugin>\n    <id>com.xiaojinzi.routergo</id>\n    <name>RouterGo</name>\n    <vendor email=\"cxj0xiaojinzi@gmail.com\" url=\"https://github.com/xiaojinzi123/RouterGoPlugin\">xiaojinzi</vendor>\n\n    <description><![CDATA[\n    when you use <a href='https://github.com/xiaojinzi123/Component' >Router</a> for Component in Android.\n    This plugin can jump to target Activity when you click the icon on the left of code.\n    It also support the Interceptor of router.<em>RouterGo</em>\n    ]]>\n    </description>\n\n    <change-notes><![CDATA[\n    <b>v1.2.6</b>\n    <ul>\n        <li>\n            support AS 3.6+\n        </li>\n        <li>\n            support Fragment navigate\n        </li>\n    </ul>\n    <b>v1.2.4&v1.2.5</b>\n    <ul>\n        <li>\n            fix name of RxNavigator\n        </li>\n    </ul>\n    <b>v1.2.3</b>\n    <ul>\n        <li>\n        Support 3.4 version of Android Studio, The original version is only support 3.5.\n        </li>\n    </ul>\n    <b>v1.2.2</b>\n    <ul>\n        <li>\n        fix bug: the icon on the left of your `router` code will disappear sometimes, this is caused by the cache.\n        I find this bug for a long time!\n        </li>\n    </ul>\n    <b>v1.2.1</b>\n    <ul>\n        <li>\n        fix bug: you can write '<meta-data android:name=\"host_component2\" android:value=\"component2\" />'\n        to tell RouterGo plugin the host of this module. Different module you should define different name.\n        But your name must startWith 'host_'.\n        </li>\n    </ul>\n    <b>v1.2</b>\n    <ul>\n        <li> optimize code </li>\n        <li> support kotlin </li>\n    </ul>\n    <b>v1.1.1</b>\n    <ul>\n        <li> optimize code </li>\n    </ul>\n    <b>v1.1</b>\n    <ul>\n        <li> The logo was updated </li>\n        <li> The implementation code was updated after \"https://github.com/xiaojinzi123/Component\" published </li>\n    </ul>\n    ]]>\n    </change-notes>\n\n    <extensions defaultExtensionNs=\"com.intellij\">\n        <!-- Add your extensions here -->\n        <codeInsight.lineMarkerProvider language=\"JAVA\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.FragmentGoLineMarkerProvider\"/>\n        <codeInsight.lineMarkerProvider language=\"JAVA\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.RouterGoMarkerProvider\"/>\n        <codeInsight.lineMarkerProvider language=\"JAVA\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.InterceptorGoInRouterAnnoLineMarkerProvider\"/>\n        <codeInsight.lineMarkerProvider language=\"JAVA\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.InterceptorUsageLineMarkerProvider\"/>\n        <codeInsight.lineMarkerProvider language=\"JAVA\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.InterceptorGoLineMarkerProvider\"/>\n        <codeInsight.lineMarkerProvider language=\"JAVA\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.RouterUsageLineMarkerProvider\"/>\n\n        <codeInsight.lineMarkerProvider language=\"kotlin\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.FragmentGoLineMarkerProviderForKotlin\"/>\n        <codeInsight.lineMarkerProvider language=\"kotlin\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.RouterGoMarkerProviderForKotlin\"/>\n        <codeInsight.lineMarkerProvider language=\"kotlin\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.RouterUsageLineMarkerProviderForKotlin\"/>\n        <codeInsight.lineMarkerProvider language=\"kotlin\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.InterceptorGoInRouterAnnoLineMarkerProviderForKotlin\"/>\n        <codeInsight.lineMarkerProvider language=\"kotlin\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.InterceptorGoLineMarkerProviderForKotlin\"/>\n        <codeInsight.lineMarkerProvider language=\"kotlin\"\n                                        implementationClass=\"com.xiaojinzi.routergo.lineMarkerProvider.InterceptorUsageLineMarkerProviderForKotlin\"/>\n    </extensions>\n\n    <!--<idea-version since-build=\"183\" until-build=\"183.*\"/>-->\n\n    <depends>com.intellij.modules.java</depends>\n    <depends>com.intellij.modules.platform</depends>\n    <depends>org.jetbrains.android</depends>\n    <depends>org.intellij.groovy</depends>\n    <depends>org.jetbrains.kotlin</depends>\n\n</idea-plugin>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/plugin.xml	(revision 1d97f846b89d7e1e8de7199daeaffad02092e4d3)
+++ src/main/resources/META-INF/plugin.xml	(date 1596292937497)
@@ -11,6 +11,15 @@
     </description>
 
     <change-notes><![CDATA[
+    <b>v1.2.7</b>
+    <ul>
+        <li>
+            support AS 3.6+
+        </li>
+        <li>
+            support Fragment navigate
+        </li>
+    </ul>
     <b>v1.2.6</b>
     <ul>
         <li>
Index: src/main/java/com/xiaojinzi/routergo/lineMarkerProvider/RouterGoMarkerProviderForKotlin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xiaojinzi.routergo.lineMarkerProvider;\n\nimport com.intellij.codeInsight.daemon.LineMarkerInfo;\nimport com.intellij.openapi.editor.markup.GutterIconRenderer;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiMethod;\nimport com.xiaojinzi.routergo.Constants;\nimport com.xiaojinzi.routergo.util.KtUtil;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.jetbrains.kotlin.psi.KtSimpleNameExpression;\n\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * com.intellij.psi.search\n */\npublic class RouterGoMarkerProviderForKotlin extends BaseRouterGoMarkerProvider {\n\n    @Nullable\n    @Override\n    public LineMarkerInfo doGetLineMarkerInfo(@NotNull PsiElement element) {\n\n        if (element instanceof KtSimpleNameExpression) {\n            KtSimpleNameExpression ktSimpleNameExpression = (KtSimpleNameExpression) element;\n            PsiMethod targetPsiMethod = KtUtil.getTargetRefrenceMethod(ktSimpleNameExpression);\n            if (targetPsiMethod != null) {\n                boolean isHostMethod = targetPsiMethod.equals(routerRequestHostMethod) ||\n                        targetPsiMethod.equals(routerHostMethod) ||\n                        targetPsiMethod.equals(rxRouterHostMethod);\n                boolean isHostAndPathMethod = targetPsiMethod.equals(routerRequestHostAndPathMethod) ||\n                        targetPsiMethod.equals(routerHostAndPathMethod) ||\n                        targetPsiMethod.equals(rxRouterHostAndPathMethod);\n                if (isHostMethod || isHostAndPathMethod) {\n                    if (KtUtil.getRouterInfoFromKtNameReferenceExpression(ktSimpleNameExpression) != null) {\n                        PsiElement targetPsiElement = ktSimpleNameExpression;\n                        LineMarkerInfo<PsiElement> markerInfo = new LineMarkerInfo<PsiElement>(\n                                targetPsiElement,\n                                targetPsiElement.getTextRange(),\n                                Constants.ROUTER,\n                                Constants.TOOLTIP_PROVIDER_FUNCTION_FOR_ROUTER,\n                                new RouterNavigation(ktSimpleNameExpression),\n                                GutterIconRenderer.Alignment.RIGHT\n                        );\n                        return markerInfo;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    @Override\n    public void collectSlowLineMarkers(@NotNull List<PsiElement> elements, @NotNull Collection<LineMarkerInfo> result) {\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/xiaojinzi/routergo/lineMarkerProvider/RouterGoMarkerProviderForKotlin.java	(revision 1d97f846b89d7e1e8de7199daeaffad02092e4d3)
+++ src/main/java/com/xiaojinzi/routergo/lineMarkerProvider/RouterGoMarkerProviderForKotlin.java	(date 1596292852136)
@@ -6,6 +6,7 @@
 import com.intellij.psi.PsiMethod;
 import com.xiaojinzi.routergo.Constants;
 import com.xiaojinzi.routergo.util.KtUtil;
+import com.xiaojinzi.routergo.util.Util;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.jetbrains.kotlin.psi.KtSimpleNameExpression;
@@ -26,12 +27,8 @@
             KtSimpleNameExpression ktSimpleNameExpression = (KtSimpleNameExpression) element;
             PsiMethod targetPsiMethod = KtUtil.getTargetRefrenceMethod(ktSimpleNameExpression);
             if (targetPsiMethod != null) {
-                boolean isHostMethod = targetPsiMethod.equals(routerRequestHostMethod) ||
-                        targetPsiMethod.equals(routerHostMethod) ||
-                        targetPsiMethod.equals(rxRouterHostMethod);
-                boolean isHostAndPathMethod = targetPsiMethod.equals(routerRequestHostAndPathMethod) ||
-                        targetPsiMethod.equals(routerHostAndPathMethod) ||
-                        targetPsiMethod.equals(rxRouterHostAndPathMethod);
+                boolean isHostMethod = Util.isHostMethod(targetPsiMethod.getProject(), targetPsiMethod);
+                boolean isHostAndPathMethod = Util.isHostAndPathMethod(targetPsiMethod.getProject(), targetPsiMethod);
                 if (isHostMethod || isHostAndPathMethod) {
                     if (KtUtil.getRouterInfoFromKtNameReferenceExpression(ktSimpleNameExpression) != null) {
                         PsiElement targetPsiElement = ktSimpleNameExpression;
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1591611872695)
+++ .idea/compiler.xml	(date 1591611872695)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ASMIdeaPluginConfiguration\">\n    <asm skipDebug=\"false\" skipFrames=\"false\" skipCode=\"false\" expandFrames=\"false\" />\n    <groovy codeStyle=\"LEGACY\" />\n  </component>\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"JavaScriptSettings\">\n    <option name=\"languageLevel\" value=\"ES6\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"false\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 1d97f846b89d7e1e8de7199daeaffad02092e4d3)
+++ .idea/misc.xml	(date 1596291247727)
@@ -5,10 +5,13 @@
     <groovy codeStyle="LEGACY" />
   </component>
   <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="FrameworkDetectionExcludesConfiguration">
+    <file type="web" url="file://$PROJECT_DIR$" />
+  </component>
   <component name="JavaScriptSettings">
     <option name="languageLevel" value="ES6" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="false" project-jdk-name="11" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/com/xiaojinzi/routergo/lineMarkerProvider/BaseRouterGoMarkerProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xiaojinzi.routergo.lineMarkerProvider;\n\nimport com.intellij.codeInsight.daemon.LineMarkerInfo;\nimport com.intellij.codeInsight.daemon.LineMarkerProvider;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiMethod;\nimport com.xiaojinzi.routergo.util.Util;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\npublic abstract class BaseRouterGoMarkerProvider implements LineMarkerProvider {\n\n    protected PsiMethod routerRequestHostMethod = null;\n    protected PsiMethod routerHostMethod = null;\n    protected PsiMethod rxRouterHostMethod = null;\n\n    protected PsiMethod routerRequestHostAndPathMethod = null;\n    protected PsiMethod routerHostAndPathMethod = null;\n    protected PsiMethod rxRouterHostAndPathMethod = null;\n\n    @Nullable\n    @Override\n    public LineMarkerInfo getLineMarkerInfo(@NotNull PsiElement element) {\n        routerRequestHostMethod = Util.getRouterRequestHostMethod(element.getProject());\n        routerHostMethod = Util.getRouterHostMethod(element.getProject());\n        rxRouterHostMethod = Util.getRxRouterHostMethod(element.getProject());\n\n        routerRequestHostAndPathMethod = Util.getRouterRequestHostAndPathMethod(element.getProject());\n        routerHostAndPathMethod = Util.getRouterHostAndPathMethod(element.getProject());\n        rxRouterHostAndPathMethod = Util.getRxRouterHostAndPathMethod(element.getProject());\n\n        return doGetLineMarkerInfo(element);\n\n    }\n\n    public abstract LineMarkerInfo doGetLineMarkerInfo(@NotNull PsiElement element);\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/xiaojinzi/routergo/lineMarkerProvider/BaseRouterGoMarkerProvider.java	(revision 1d97f846b89d7e1e8de7199daeaffad02092e4d3)
+++ src/main/java/com/xiaojinzi/routergo/lineMarkerProvider/BaseRouterGoMarkerProvider.java	(date 1596292753998)
@@ -21,6 +21,7 @@
     @Nullable
     @Override
     public LineMarkerInfo getLineMarkerInfo(@NotNull PsiElement element) {
+
         routerRequestHostMethod = Util.getRouterRequestHostMethod(element.getProject());
         routerHostMethod = Util.getRouterHostMethod(element.getProject());
         rxRouterHostMethod = Util.getRxRouterHostMethod(element.getProject());
Index: src/main/java/com/xiaojinzi/routergo/lineMarkerProvider/RouterGoMarkerProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xiaojinzi.routergo.lineMarkerProvider;\n\nimport com.intellij.codeInsight.daemon.LineMarkerInfo;\nimport com.intellij.openapi.editor.markup.GutterIconRenderer;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiMethod;\nimport com.intellij.psi.PsiReferenceExpression;\nimport com.xiaojinzi.routergo.Constants;\nimport com.xiaojinzi.routergo.util.Util;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * com.intellij.psi.search\n *\n * @author xiaojinzi\n */\npublic class RouterGoMarkerProvider extends BaseRouterGoMarkerProvider {\n\n    @Nullable\n    @Override\n    public LineMarkerInfo doGetLineMarkerInfo(@NotNull PsiElement element) {\n\n        if (element instanceof PsiReferenceExpression) {\n            PsiReferenceExpression psiReferenceExpression = (PsiReferenceExpression) element;\n            PsiElement targetPsiElement = psiReferenceExpression.resolve();\n            if (targetPsiElement instanceof PsiMethod) {\n                PsiMethod targetPsiMethod = (PsiMethod) targetPsiElement;\n                boolean isHostMethod = targetPsiMethod.equals(routerRequestHostMethod) ||\n                        targetPsiMethod.equals(routerHostMethod) ||\n                        targetPsiMethod.equals(rxRouterHostMethod);\n                boolean isHostAndPathMethod = targetPsiMethod.equals(routerRequestHostAndPathMethod) ||\n                        targetPsiMethod.equals(routerHostAndPathMethod) ||\n                        targetPsiMethod.equals(rxRouterHostAndPathMethod);\n                // 如果是 host 方法或者是 hostAndPath 方法\n                if (isHostMethod || isHostAndPathMethod) {\n                    // 如果是一个有 host 和 path 方法 或者 hostAndPath 方法使用的\n                    if (Util.isRouteAble(psiReferenceExpression)) {\n                        PsiElement targetNavigationPsiElement = psiReferenceExpression;\n                        LineMarkerInfo<PsiElement> markerInfo = new LineMarkerInfo<PsiElement>(\n                                targetNavigationPsiElement,\n                                targetNavigationPsiElement.getTextRange(),\n                                Constants.ROUTER,\n                                Constants.TOOLTIP_PROVIDER_FUNCTION_FOR_ROUTER,\n                                new RouterNavigation(psiReferenceExpression), GutterIconRenderer.Alignment.RIGHT\n                        );\n                        return markerInfo;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n\n    @Override\n    public void collectSlowLineMarkers(@NotNull List<PsiElement> elements, @NotNull Collection<LineMarkerInfo> result) {\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/xiaojinzi/routergo/lineMarkerProvider/RouterGoMarkerProvider.java	(revision 1d97f846b89d7e1e8de7199daeaffad02092e4d3)
+++ src/main/java/com/xiaojinzi/routergo/lineMarkerProvider/RouterGoMarkerProvider.java	(date 1596292753993)
@@ -29,12 +29,8 @@
             PsiElement targetPsiElement = psiReferenceExpression.resolve();
             if (targetPsiElement instanceof PsiMethod) {
                 PsiMethod targetPsiMethod = (PsiMethod) targetPsiElement;
-                boolean isHostMethod = targetPsiMethod.equals(routerRequestHostMethod) ||
-                        targetPsiMethod.equals(routerHostMethod) ||
-                        targetPsiMethod.equals(rxRouterHostMethod);
-                boolean isHostAndPathMethod = targetPsiMethod.equals(routerRequestHostAndPathMethod) ||
-                        targetPsiMethod.equals(routerHostAndPathMethod) ||
-                        targetPsiMethod.equals(rxRouterHostAndPathMethod);
+                boolean isHostMethod = Util.isHostMethod(targetPsiMethod.getProject(), targetPsiMethod);
+                boolean isHostAndPathMethod = Util.isHostAndPathMethod(targetPsiMethod.getProject(), targetPsiMethod);
                 // 如果是 host 方法或者是 hostAndPath 方法
                 if (isHostMethod || isHostAndPathMethod) {
                     // 如果是一个有 host 和 path 方法 或者 hostAndPath 方法使用的
Index: src/main/java/com/xiaojinzi/routergo/util/Util.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xiaojinzi.routergo.util;\n\nimport com.intellij.lang.jvm.JvmMethod;\nimport com.intellij.lang.jvm.annotation.JvmAnnotationArrayValue;\nimport com.intellij.lang.jvm.annotation.JvmAnnotationAttributeValue;\nimport com.intellij.lang.jvm.annotation.JvmAnnotationConstantValue;\nimport com.intellij.openapi.module.Module;\nimport com.intellij.openapi.module.ModuleUtil;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.psi.*;\nimport com.intellij.psi.search.GlobalSearchScope;\nimport com.intellij.psi.search.ProjectScope;\nimport com.intellij.psi.search.searches.AnnotatedElementsSearch;\nimport com.intellij.psi.search.searches.MethodReferencesSearch;\nimport com.xiaojinzi.routergo.Constants;\nimport com.xiaojinzi.routergo.bean.InterceptorAnnoInfo;\nimport com.xiaojinzi.routergo.bean.RouterInfo;\nimport org.jetbrains.android.dom.manifest.Application;\nimport org.jetbrains.android.dom.manifest.Manifest;\nimport org.jetbrains.android.facet.AndroidFacet;\nimport org.jetbrains.android.facet.AndroidRootUtil;\nimport org.jetbrains.android.util.AndroidUtils;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * GlobalSearchScope allScope = ProjectScope.getAllScope(psiElement.getProject());\n * JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(psiElement.getProject());\n *\n * PsiClass routerClass = javaPsiFacade.findClass(Constants.RouterClassName, allScope);\n * PsiMethod psiWithMethodRouter = (PsiMethod) routerClass.findMethodsByName(Constants.RouterWithMethodName)[0];\n */\npublic class Util {\n\n    /**\n     * 获取调用了 Router...interceptorNames 方法的所有引用\n     *\n     * @param project\n     * @return\n     */\n    @NotNull\n    public static List<PsiReference> getAllInterceptorMethodReferences(@NotNull Project project) {\n        List<PsiReference> referenceMethodList = new ArrayList<>();\n        GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n        JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n        PsiClass routerBuilderClass = javaPsiFacade.findClass(Constants.RouterBuilderClassName, allScope);\n        // 这个可能为空\n        PsiClass rxRouterBuilderClass = javaPsiFacade.findClass(Constants.RxRouterBuilderClassName, allScope);\n\n        // 搜索 使用中的 interceptorNames 的方法\n        PsiMethod psiMethodRouter = (PsiMethod) routerBuilderClass.findMethodsByName(Constants.RouterInterceptorNameMethodName)[0];\n        referenceMethodList.addAll(MethodReferencesSearch.search(psiMethodRouter).findAll());\n\n        // 如果用户依赖了 rx 版本的库,那么才去寻找对应的方法\n        if (rxRouterBuilderClass != null) {\n            PsiMethod psiMethodRxRouter = (PsiMethod) rxRouterBuilderClass.findMethodsByName(Constants.RouterInterceptorNameMethodName)[0];\n            referenceMethodList.addAll(MethodReferencesSearch.search(psiMethodRxRouter).findAll());\n        }\n        return referenceMethodList;\n    }\n\n    /**\n     * 获取所有使用 RouterAnno 注解的注解集合\n     *\n     * @param project\n     * @return\n     */\n    @NotNull\n    public static List<PsiAnnotation> getAllRouterAnno(@NotNull Project project) {\n\n        GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n        JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n\n        PsiClass routerAnnoClass = javaPsiFacade.findClass(Constants.RouterAnnoClassName, allScope);\n\n        // 包括 java 和 kotlin 使用 RouterAnno\n        List<PsiAnnotation> psiAnnotationList = new ArrayList<>();\n\n        Collection<PsiClass> routerActivities = AnnotatedElementsSearch\n                .searchPsiClasses(routerAnnoClass, allScope)\n                .findAll();\n        Collection<PsiMethod> routerStaticMethods = AnnotatedElementsSearch\n                .searchPsiMethods(routerAnnoClass, allScope)\n                .findAll();\n\n        for (PsiClass routerClass : routerActivities) {\n            // Activity上的注解\n            PsiAnnotation routerClassAnnotation = routerClass.getAnnotation(routerAnnoClass.getQualifiedName());\n            if (routerClassAnnotation != null) {\n                psiAnnotationList.add(routerClassAnnotation);\n            }\n        }\n        for (PsiMethod routerStaticMethod : routerStaticMethods) {\n            // 静态方法上的注解\n            PsiAnnotation routerStaticMethodAnnotation = routerStaticMethod.getAnnotation(routerAnnoClass.getQualifiedName());\n            if (routerStaticMethodAnnotation != null) {\n                psiAnnotationList.add(routerStaticMethodAnnotation);\n            }\n        }\n        return psiAnnotationList;\n    }\n\n    /**\n     * 从 RouterAnno 注解中获取 interceptorNames 属性的集合\n     *\n     * @param psiAnnotation\n     * @return\n     */\n    @NotNull\n    public static List<String> getInterceptorNamesFromRouterAnno(@NotNull PsiAnnotation psiAnnotation) {\n        try {\n            List<String> result = new ArrayList<>();\n            JvmAnnotationAttributeValue attributeValue = psiAnnotation.findAttribute(Constants.RouterAnnoInterceptorName).getAttributeValue();\n            if (attributeValue instanceof JvmAnnotationConstantValue) {\n                result.add((String)((JvmAnnotationConstantValue)attributeValue).getConstantValue());\n            }else {\n                JvmAnnotationArrayValue psiAnnotationArrayValue = (JvmAnnotationArrayValue) attributeValue;\n                List<JvmAnnotationAttributeValue> values = psiAnnotationArrayValue.getValues();\n                for (JvmAnnotationAttributeValue value : values) {\n                    if (value instanceof JvmAnnotationConstantValue) {\n                        result.add((String) ((JvmAnnotationConstantValue) value).getConstantValue());\n                    }\n                }\n            }\n            return result;\n        } catch (Exception ignore) {\n            // ignore\n            // System.err.println(\"getInterceptorNamesFromRouterAnno 失败：\" + ignore.getMessage());\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * 从注解 @InterceptorAnno(\"login\") 中获取拦截器名称信息\n     *\n     * @param interceptorAnno\n     * @return\n     */\n    @Nullable\n    public static InterceptorAnnoInfo getInterceptorInfoFromInterceptorAnno(@NotNull PsiAnnotation interceptorAnno) {\n        String interceptorName = null;\n        try {\n            JvmAnnotationAttributeValue hostAttributeValue = interceptorAnno.findAttribute(Constants.InterceptorAnnoValueName).getAttributeValue();\n            if (hostAttributeValue instanceof JvmAnnotationConstantValue) {\n                interceptorName = (String) ((JvmAnnotationConstantValue) hostAttributeValue).getConstantValue();\n            }\n        } catch (Exception ignore) {\n            // ignore\n        }\n        if (interceptorName == null) {\n            return null;\n        }\n        return new InterceptorAnnoInfo(interceptorName);\n    }\n\n    @Nullable\n    public static RouterInfo getRouterInfoFromAnno(@NotNull PsiAnnotation routerAnno) {\n        RouterInfo routerInfo = new RouterInfo();\n        String hostAndPath = null;\n        try {\n            JvmAnnotationAttributeValue hostAttributeValue = routerAnno.findAttribute(Constants.RouterAnnoHostName).getAttributeValue();\n            if (hostAttributeValue instanceof JvmAnnotationConstantValue) {\n                routerInfo.host = (String) ((JvmAnnotationConstantValue) hostAttributeValue).getConstantValue();\n            }\n        } catch (Exception ignore) {\n            // ignore\n        }\n        try {\n            JvmAnnotationAttributeValue pathAttributeValue = routerAnno.findAttribute(Constants.RouterAnnoPathName).getAttributeValue();\n            if (pathAttributeValue instanceof JvmAnnotationConstantValue) {\n                routerInfo.path = (String) ((JvmAnnotationConstantValue) pathAttributeValue).getConstantValue();\n            }\n        } catch (Exception ignore) {\n            // ignore\n        }\n        try {\n            JvmAnnotationAttributeValue pathAttributeValue = routerAnno.findAttribute(Constants.RouterAnnoHostAndPathName).getAttributeValue();\n            if (pathAttributeValue instanceof JvmAnnotationConstantValue) {\n                hostAndPath = (String) ((JvmAnnotationConstantValue) pathAttributeValue).getConstantValue();\n            }\n        } catch (Exception ignore) {\n            // ignore\n        }\n        // 可能是默认值\n        if (routerInfo.host == null) {\n            routerInfo.host = Util.getHostValueFromModule(routerAnno);\n        }\n        routerInfo.setHostAndPath(hostAndPath);\n        if (routerInfo.host == null || routerInfo.path == null) {\n            return null;\n        }\n        return routerInfo;\n    }\n\n    @Nullable\n    public static String getHostValueFromModule(@NotNull PsiElement psiElement) {\n        String host = null;\n        try {\n            // 找到对应的 module\n            Module module = ModuleUtil.findModuleForPsiElement(psiElement);\n            AndroidFacet androidFacet = AndroidFacet.getInstance(module);\n            VirtualFile manifestFile = AndroidRootUtil.getPrimaryManifestFile(androidFacet);\n            final Manifest manifest = AndroidUtils.loadDomElement(androidFacet.getModule(), manifestFile, Manifest.class);\n            Application manifestApplication = manifest.getApplication();\n            if (manifestApplication.getMetaDatas() != null) {\n                List<Object> metaDatas = new ArrayList<>(manifestApplication.getMetaDatas());\n                for (Object metaData : metaDatas) {\n                    host = readHostFromMetaData(metaData);\n                    if (host != null) {\n                        break;\n                    }\n                }\n            }\n        } catch (Exception ignore) {\n            // ignore\n        }\n        return host;\n    }\n\n    /**\n     * ((MetaData)metaDatas.get(0)).getValue().getStringValue();\n     *\n     * @param metaData\n     * @return\n     */\n    @Nullable\n    private static String readHostFromMetaData(Object metaData) {\n        try {\n            Object nameObj = metaData.getClass().getDeclaredMethod(\"getName\").invoke(metaData);\n            Object valueObj = metaData.getClass().getDeclaredMethod(\"getValue\").invoke(metaData);\n            String hostName = (String) nameObj.getClass().getDeclaredMethod(\"getStringValue\").invoke(nameObj);\n            String hostValue = (String) valueObj.getClass().getDeclaredMethod(\"getStringValue\").invoke(valueObj);\n            if (hostName != null && hostName.toLowerCase().startsWith(\"host_\")) {\n                if (hostValue == null) {\n                    return null;\n                }else {\n                    return hostValue;\n                }\n            }\n            return null;\n        } catch (Exception e) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRouterWithFragmentMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            PsiClass routerClass = javaPsiFacade.findClass(Constants.RouterClassName, allScope);\n            PsiClass fragmentNavigatorClass = javaPsiFacade.findClass(Constants.FragmentNavigatorClassName, allScope);\n            PsiMethod[] psiMethods = (PsiMethod[]) routerClass.findMethodsByName(Constants.RouterWithMethodName);\n            for (int i = 0; i < psiMethods.length; i++) {\n                PsiMethod psiMethod = psiMethods[i];\n                PsiType returnType = psiMethod.getReturnType();\n                if (returnType instanceof PsiClassType) {\n                    PsiClass targetReturnClass = ((PsiClassType) returnType).resolve();\n                    if (fragmentNavigatorClass.equals(targetReturnClass)) {\n                        return psiMethod;\n                    }\n                }\n            }\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRxRouterWithFragmentMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            PsiClass rxRouterClass = javaPsiFacade.findClass(Constants.RxRouterClassName, allScope);\n            PsiClass fragmentNavigatorClass = javaPsiFacade.findClass(Constants.FragmentRxNavigatorClassName, allScope);\n            PsiMethod[] psiMethods = (PsiMethod[]) rxRouterClass.findMethodsByName(Constants.RxRouterWithMethodName);\n            for (int i = 0; i < psiMethods.length; i++) {\n                PsiMethod psiMethod = psiMethods[i];\n                PsiType returnType = psiMethod.getReturnType();\n                if (returnType instanceof PsiClassType) {\n                    PsiClass targetReturnClass = ((PsiClassType) returnType).resolve();\n                    if (fragmentNavigatorClass.equals(targetReturnClass)) {\n                        return psiMethod;\n                    }\n                }\n            }\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRouterRequestHostMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            PsiClass routerRequestBuilderClass = javaPsiFacade.findClass(Constants.RouterRequestBuilderClassName, allScope);\n            return (PsiMethod) routerRequestBuilderClass.findMethodsByName(Constants.RouterHostMethodName)[0];\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRouterRequestHostAndPathMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            // 注解类@RouterAnno(.....)\n            PsiClass routerRequestBuilderClass = javaPsiFacade.findClass(Constants.RouterRequestBuilderClassName, allScope);\n            return (PsiMethod) routerRequestBuilderClass.findMethodsByName(Constants.RouterHostAndPathMethodName)[0];\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRouterHostMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            // 注解类@RouterAnno(.....)\n            PsiClass routerRequestBuilderClass = javaPsiFacade.findClass(Constants.RouterBuilderClassName, allScope);\n            return (PsiMethod) routerRequestBuilderClass.findMethodsByName(Constants.RouterHostMethodName)[0];\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRouterHostAndPathMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            // 注解类@RouterAnno(.....)\n            PsiClass routerRequestBuilderClass = javaPsiFacade.findClass(Constants.RouterBuilderClassName, allScope);\n            return (PsiMethod) routerRequestBuilderClass.findMethodsByName(Constants.RouterHostAndPathMethodName)[0];\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRxRouterHostMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            // 注解类@RouterAnno(.....)\n            PsiClass routerRequestBuilderClass = javaPsiFacade.findClass(Constants.RxRouterBuilderClassName, allScope);\n            return (PsiMethod) routerRequestBuilderClass.findMethodsByName(Constants.RouterHostMethodName)[0];\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRxRouterHostAndPathMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            // 注解类@RouterAnno(.....)\n            PsiClass routerRequestBuilderClass = javaPsiFacade.findClass(Constants.RxRouterBuilderClassName, allScope);\n            return (PsiMethod) routerRequestBuilderClass.findMethodsByName(Constants.RouterHostAndPathMethodName)[0];\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRouterInterceptorNameMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            // 注解类@RouterAnno(.....)\n            PsiClass routerRequestBuilderClass = javaPsiFacade.findClass(Constants.RouterBuilderClassName, allScope);\n            return (PsiMethod) routerRequestBuilderClass.findMethodsByName(Constants.RouterInterceptorNameMethodName)[0];\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    @Nullable\n    public static PsiMethod getRxRouterInterceptorNameMethod(@NotNull Project project) {\n        try {\n            GlobalSearchScope allScope = ProjectScope.getAllScope(project);\n            JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(project);\n            // 注解类@RouterAnno(.....)\n            PsiClass routerRequestBuilderClass = javaPsiFacade.findClass(Constants.RxRouterBuilderClassName, allScope);\n            return (PsiMethod) routerRequestBuilderClass.findMethodsByName(Constants.RouterInterceptorNameMethodName)[0];\n        } catch (Exception ignore) {\n        }\n        return null;\n    }\n\n    /**\n     * 获取 Router.with().host().path().interceptorNames(\"xxx\",\"ccc\"); 中的拦截器名称的列表\n     *\n     * @param psiReferenceExpression\n     * @return\n     */\n    @Nullable\n    public static List<String> getInterceptorNames(@NotNull PsiReferenceExpression psiReferenceExpression) {\n        try {\n            List<String> interceptorNames = new ArrayList<>();\n            PsiExpressionList psiExpressionList = (PsiExpressionList) psiReferenceExpression.getParent().getChildren()[1];\n            for (PsiExpression psiExpression : psiExpressionList.getExpressions()) {\n                interceptorNames.add(getStringValue(psiExpression));\n            }\n            if (interceptorNames.size() == 0) {\n                return null;\n            } else {\n                return interceptorNames;\n            }\n        } catch (Exception ignore) {\n            // ignore\n        }\n        return null;\n    }\n\n    public static boolean isRouteAble(@NotNull PsiReferenceExpression psiReferenceExpression) {\n        return getRouterInfoFromPsiReferenceExpression(psiReferenceExpression) == null ? false : true;\n    }\n\n    /**\n     * .....host(\"order\") 中拿到 \"order\" 字符串 也支持 hostAndPath 方法\n     *\n     * @param psiReferenceExpression\n     * @return 返回一个 RouterInfo 对象表示获取到的 Host 和 Path\n     */\n    @Nullable\n    public static RouterInfo getRouterInfoFromPsiReferenceExpression(@NotNull PsiReferenceExpression psiReferenceExpression) {\n        RouterInfo info = new RouterInfo();\n        // 尝试获取 host() 和 path() 方法写的参数\n        try {\n            PsiElement psiHostElement = psiReferenceExpression.getParent().getChildren()[1].getChildren()[1];\n            PsiElement psiPathElement = psiReferenceExpression.getParent().getParent().getParent().getChildren()[1].getChildren()[1];\n            info.host = getStringValue(psiHostElement);\n            info.path = getStringValue(psiPathElement);\n        } catch (Exception ignore) {\n            // ignore\n        }\n\n        if (info.isValid()) {\n            return info;\n        }\n\n        // 尝试获取 hostAndPath\n        try {\n            if (psiReferenceExpression.getLastChild() instanceof PsiIdentifier && Constants.RouterHostAndPathMethodName.equals(psiReferenceExpression.getLastChild().getText())) {\n                PsiElement psiHostAndPathElement = psiReferenceExpression.getParent().getChildren()[1].getChildren()[1];\n                info.setHostAndPath(getStringValue(psiHostAndPathElement));\n            }\n        } catch (Exception ignore) {\n            // ignore\n        }\n        if (info.isValid()) {\n            return info;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * 尝试获取一个元素的 String 文本\n     *\n     * @param psiElement\n     * @return\n     */\n    @Nullable\n    public static String getStringValue(@NotNull PsiElement psiElement) {\n        String value = null;\n        if (psiElement instanceof PsiReferenceExpression) {\n            try {\n                // 引用的类型\n                PsiElement targetPsiElement = ((PsiReferenceExpression) psiElement).resolve();\n                if (targetPsiElement instanceof PsiLiteralExpression) {\n                    value = (String) ((PsiLiteralExpression) ((PsiField) targetPsiElement).getInitializer()).getValue();\n                } else if (targetPsiElement instanceof PsiField) { // 如果是一个字段, 那么看下字段的值是啥类型的\n                    PsiElement valuePsiElement = targetPsiElement.getLastChild().getPrevSibling();\n                    value = getStringValue(valuePsiElement);\n                }\n                return value;\n            } catch (Exception ignore) {\n                // ignore\n            }\n        } else if (psiElement instanceof PsiLiteralExpression) {\n            // 字符串表达式\n            PsiLiteralExpression psiLiteralExpression = (PsiLiteralExpression) psiElement;\n            value = (String) psiLiteralExpression.getValue();\n            return value;\n        } else if (psiElement instanceof PsiPolyadicExpression) {\n            PsiExpression[] operands = ((PsiPolyadicExpression) psiElement).getOperands();\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < operands.length; i++) {\n                sb.append(getStringValue(operands[i]));\n            }\n            value = sb.toString();\n        }\n        return value;\n    }\n\n    public static boolean isStringExpression(@NotNull PsiElement psiElement) {\n        String stringValue = getStringValue(psiElement);\n        if (stringValue == null || \"\".equals(stringValue)) {\n            return false;\n        }else {\n            return true;\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/xiaojinzi/routergo/util/Util.java	(revision 1d97f846b89d7e1e8de7199daeaffad02092e4d3)
+++ src/main/java/com/xiaojinzi/routergo/util/Util.java	(date 1596292753985)
@@ -108,9 +108,6 @@
 
     /**
      * 从 RouterAnno 注解中获取 interceptorNames 属性的集合
-     *
-     * @param psiAnnotation
-     * @return
      */
     @NotNull
     public static List<String> getInterceptorNamesFromRouterAnno(@NotNull PsiAnnotation psiAnnotation) {
@@ -423,6 +420,26 @@
         return null;
     }
 
+    public static boolean isHostMethod(@NotNull Project project, @NotNull PsiMethod targetPsiMethod) {
+        PsiMethod routerRequestHostMethod = Util.getRouterRequestHostMethod(project);
+        PsiMethod routerHostMethod = Util.getRouterHostMethod(project);
+        PsiMethod rxRouterHostMethod = Util.getRxRouterHostMethod(project);
+        boolean isHostMethod = targetPsiMethod.equals(routerRequestHostMethod) ||
+                targetPsiMethod.equals(routerHostMethod) ||
+                targetPsiMethod.equals(rxRouterHostMethod);
+        return isHostMethod;
+    }
+
+    public static boolean isHostAndPathMethod(@NotNull Project project, @NotNull PsiMethod targetPsiMethod) {
+        PsiMethod routerRequestHostAndPathMethod = Util.getRouterRequestHostAndPathMethod(project);
+        PsiMethod routerHostAndPathMethod = Util.getRouterHostAndPathMethod(project);
+        PsiMethod rxRouterHostAndPathMethod = Util.getRxRouterHostAndPathMethod(project);
+        boolean isHostAndPathMethod = targetPsiMethod.equals(routerRequestHostAndPathMethod) ||
+                targetPsiMethod.equals(routerHostAndPathMethod) ||
+                targetPsiMethod.equals(rxRouterHostAndPathMethod);
+        return isHostAndPathMethod;
+    }
+
     public static boolean isRouteAble(@NotNull PsiReferenceExpression psiReferenceExpression) {
         return getRouterInfoFromPsiReferenceExpression(psiReferenceExpression) == null ? false : true;
     }
@@ -435,35 +452,53 @@
      */
     @Nullable
     public static RouterInfo getRouterInfoFromPsiReferenceExpression(@NotNull PsiReferenceExpression psiReferenceExpression) {
+        PsiElement psiElement = psiReferenceExpression.resolve();
+        if ((psiElement instanceof PsiMethod) == false) {
+            return null;
+        }
+        PsiMethod psiMethod = (PsiMethod) psiElement;
+        // 声明返回值
         RouterInfo info = new RouterInfo();
-        // 尝试获取 host() 和 path() 方法写的参数
-        try {
-            PsiElement psiHostElement = psiReferenceExpression.getParent().getChildren()[1].getChildren()[1];
-            PsiElement psiPathElement = psiReferenceExpression.getParent().getParent().getParent().getChildren()[1].getChildren()[1];
-            info.host = getStringValue(psiHostElement);
-            info.path = getStringValue(psiPathElement);
-        } catch (Exception ignore) {
-            // ignore
-        }
-
-        if (info.isValid()) {
-            return info;
+        boolean isHostMethod = Util.isHostMethod(psiElement.getProject(), psiMethod);
+        if (isHostMethod) {
+            // 尝试获取 host() 和 path() 方法写的参数
+            try {
+                PsiElement psiHostElement = psiReferenceExpression.getParent().getChildren()[1].getChildren()[1];
+                PsiElement psiPathElement = psiReferenceExpression.getParent().getParent().getParent().getChildren()[1].getChildren()[1];
+                info.host = getStringValue(psiHostElement);
+                info.path = getStringValue(psiPathElement);
+            } catch (Exception ignore) {
+                // ignore
+            }
+            if (info.isValid()) {
+                return info;
+            } else {
+                return null;
+            }
         }
 
-        // 尝试获取 hostAndPath
-        try {
-            if (psiReferenceExpression.getLastChild() instanceof PsiIdentifier && Constants.RouterHostAndPathMethodName.equals(psiReferenceExpression.getLastChild().getText())) {
-                PsiElement psiHostAndPathElement = psiReferenceExpression.getParent().getChildren()[1].getChildren()[1];
-                info.setHostAndPath(getStringValue(psiHostAndPathElement));
-            }
-        } catch (Exception ignore) {
-            // ignore
-        }
-        if (info.isValid()) {
-            return info;
-        } else {
-            return null;
-        }
+        boolean isHostAndPathMethod = Util.isHostAndPathMethod(psiElement.getProject(), psiMethod);
+        if (isHostAndPathMethod) {
+            // 尝试获取 hostAndPath
+            try {
+                if (psiReferenceExpression.getLastChild() instanceof PsiIdentifier &&
+                        Constants.RouterHostAndPathMethodName.equals(psiReferenceExpression.getLastChild().getText())) {
+                    PsiElement psiHostAndPathElement = psiReferenceExpression.getParent().getChildren()[1].getChildren()[1];
+                    info.setHostAndPath(getStringValue(psiHostAndPathElement));
+                }
+            } catch (Exception ignore) {
+                // ignore
+            }
+
+            if (info.isValid()) {
+                return info;
+            } else {
+                return null;
+            }
+        }
+
+        return null;
+
     }
 
     /**
